
MODULE intermediate_id(input, output)
DEFINE
    capB := capa;
    rr := 2;
	sr := 2;
    cond_congestion := (p_buffer / capB) > (7 / 10);
VAR
    p_buffer : 0.. capB;
    state : {start, congestion};
IVAR
    action : {receive, send};
ASSIGN
    init(state) := start;
    next(state) := 
        case
            cond_congestion : congestion;
            TRUE : state;
        esac;
    init(p_buffer) := 0;
    next(p_buffer) :=
        case
            state = start & action = receive & input.num_p >= rr & p_buffer <= capB - rr : p_buffer + rr;
            state = start & action = send & p_buffer >= sr : p_buffer - sr;
			TRUE : p_buffer;
		esac;
	next(input.num_p) :=
		case
			state = start & action = receive & input.num_p >= rr : input.num_p - rr;
			TRUE : input.num_p;
		esac;
	next(output.num_p) :=
		case
			state = start & action = send & p_buffer >= sr & output.num_p <= 50 - sr : output.num_p + sr;
			TRUE : output.num_p;
		esac;

